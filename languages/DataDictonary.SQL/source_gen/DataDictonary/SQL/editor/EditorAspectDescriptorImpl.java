package DataDictonary.SQL.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.EditorAspectDescriptorBase;
import org.jetbrains.annotations.NotNull;
import java.util.Collection;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Collections;
import jetbrains.mps.openapi.editor.descriptor.SubstituteMenu;
import java.util.Map;
import java.util.HashMap;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

public class EditorAspectDescriptorImpl extends EditorAspectDescriptorBase {
  @NotNull
  public Collection<ConceptEditor> getDeclaredEditors(SAbstractConcept concept) {
    {
      SAbstractConcept cncpt = ((SAbstractConcept) concept);
      Integer preIndex = indices_xbvbvu_a0a.get(cncpt);
      int switchIndex = (preIndex == null ? -1 : preIndex);
      switch (switchIndex) {
        case 0:
          if (true) {
            return Collections.<ConceptEditor>singletonList(new Attribute_Editor());
          }
          break;
        case 1:
          if (true) {
            return Collections.<ConceptEditor>singletonList(new BaseRelation_Editor());
          }
          break;
        case 2:
          if (true) {
            return Collections.<ConceptEditor>singletonList(new Catalog_Editor());
          }
          break;
        case 3:
          if (true) {
            return Collections.<ConceptEditor>singletonList(new Check_Editor());
          }
          break;
        case 4:
          if (true) {
            return Collections.<ConceptEditor>singletonList(new Date_Editor());
          }
          break;
        case 5:
          if (true) {
            return Collections.<ConceptEditor>singletonList(new DateTime_Editor());
          }
          break;
        case 6:
          if (true) {
            return Collections.<ConceptEditor>singletonList(new Default_Editor());
          }
          break;
        case 7:
          if (true) {
            return Collections.<ConceptEditor>singletonList(new ForeignKey_Editor());
          }
          break;
        case 8:
          if (true) {
            return Collections.<ConceptEditor>singletonList(new ForeignKeysRef_Editor());
          }
          break;
        case 9:
          if (true) {
            return Collections.<ConceptEditor>singletonList(new Index_Editor());
          }
          break;
        case 10:
          if (true) {
            return Collections.<ConceptEditor>singletonList(new IndexRef_Editor());
          }
          break;
        case 11:
          if (true) {
            return Collections.<ConceptEditor>singletonList(new Integer_Editor());
          }
          break;
        case 12:
          if (true) {
            return Collections.<ConceptEditor>singletonList(new KeysRef_Editor());
          }
          break;
        case 13:
          if (true) {
            return Collections.<ConceptEditor>singletonList(new Null_Editor());
          }
          break;
        case 14:
          if (true) {
            return Collections.<ConceptEditor>singletonList(new PrimaryKey_Editor());
          }
          break;
        case 15:
          if (true) {
            return Collections.<ConceptEditor>singletonList(new Shema_Editor());
          }
          break;
        case 16:
          if (true) {
            return Collections.<ConceptEditor>singletonList(new Varchar_Editor());
          }
          break;
        default:
      }
    }
    return Collections.<ConceptEditor>emptyList();
  }


  @NotNull
  @Override
  public Collection<SubstituteMenu> getDeclaredDefaultSubstituteMenus(SAbstractConcept concept) {
    {
      SAbstractConcept cncpt = concept;
      Integer preIndex = indices_xbvbvu_a0d.get(cncpt);
      int switchIndex = (preIndex == null ? -1 : preIndex);
      switch (switchIndex) {
        case 0:
          if (true) {
            return Collections.<SubstituteMenu>singletonList(new Key_SubstituteMenu());
          }
          break;
        default:
      }
    }
    return Collections.<SubstituteMenu>emptyList();
  }

  private static Map<SAbstractConcept, Integer> buildConceptIndices(SAbstractConcept... concepts) {
    HashMap<SAbstractConcept, Integer> res = new HashMap<SAbstractConcept, Integer>();
    int counter = 0;
    for (SAbstractConcept c : concepts) {
      res.put(c, counter++);
    }
    return res;
  }
  private static final Map<SAbstractConcept, Integer> indices_xbvbvu_a0a = buildConceptIndices(MetaAdapterFactory.getConcept(0x1e512a67eb48409aL, 0x8f1d3b3721b063dfL, 0x7df58b09c1846682L, "DataDictonary.SQL.structure.Attribute"), MetaAdapterFactory.getConcept(0x1e512a67eb48409aL, 0x8f1d3b3721b063dfL, 0x7df58b09c1846681L, "DataDictonary.SQL.structure.BaseRelation"), MetaAdapterFactory.getConcept(0x1e512a67eb48409aL, 0x8f1d3b3721b063dfL, 0x7df58b09c1846676L, "DataDictonary.SQL.structure.Catalog"), MetaAdapterFactory.getConcept(0x1e512a67eb48409aL, 0x8f1d3b3721b063dfL, 0x3e9b9b772394269fL, "DataDictonary.SQL.structure.Check"), MetaAdapterFactory.getConcept(0x1e512a67eb48409aL, 0x8f1d3b3721b063dfL, 0x29b11ade5384925aL, "DataDictonary.SQL.structure.Date"), MetaAdapterFactory.getConcept(0x1e512a67eb48409aL, 0x8f1d3b3721b063dfL, 0x29b11ade53849266L, "DataDictonary.SQL.structure.DateTime"), MetaAdapterFactory.getConcept(0x1e512a67eb48409aL, 0x8f1d3b3721b063dfL, 0x7df58b09c18b2667L, "DataDictonary.SQL.structure.Default"), MetaAdapterFactory.getConcept(0x1e512a67eb48409aL, 0x8f1d3b3721b063dfL, 0x7df58b09c184669dL, "DataDictonary.SQL.structure.ForeignKey"), MetaAdapterFactory.getConcept(0x1e512a67eb48409aL, 0x8f1d3b3721b063dfL, 0x7df58b09c18481cdL, "DataDictonary.SQL.structure.ForeignKeysRef"), MetaAdapterFactory.getConcept(0x1e512a67eb48409aL, 0x8f1d3b3721b063dfL, 0x7df58b09c1846687L, "DataDictonary.SQL.structure.Index"), MetaAdapterFactory.getConcept(0x1e512a67eb48409aL, 0x8f1d3b3721b063dfL, 0x7df58b09c18481d0L, "DataDictonary.SQL.structure.IndexRef"), MetaAdapterFactory.getConcept(0x1e512a67eb48409aL, 0x8f1d3b3721b063dfL, 0x7df58b09c1847bdcL, "DataDictonary.SQL.structure.Integer"), MetaAdapterFactory.getConcept(0x1e512a67eb48409aL, 0x8f1d3b3721b063dfL, 0x7df58b09c18481c8L, "DataDictonary.SQL.structure.KeysRef"), MetaAdapterFactory.getConcept(0x1e512a67eb48409aL, 0x8f1d3b3721b063dfL, 0x7df58b09c18b9b00L, "DataDictonary.SQL.structure.Null"), MetaAdapterFactory.getConcept(0x1e512a67eb48409aL, 0x8f1d3b3721b063dfL, 0x7df58b09c18adc96L, "DataDictonary.SQL.structure.PrimaryKey"), MetaAdapterFactory.getConcept(0x1e512a67eb48409aL, 0x8f1d3b3721b063dfL, 0x7df58b09c1846679L, "DataDictonary.SQL.structure.Shema"), MetaAdapterFactory.getConcept(0x1e512a67eb48409aL, 0x8f1d3b3721b063dfL, 0x7df58b09c1847bd9L, "DataDictonary.SQL.structure.Varchar"));
  private static final Map<SAbstractConcept, Integer> indices_xbvbvu_a0d = buildConceptIndices(MetaAdapterFactory.getConcept(0x1e512a67eb48409aL, 0x8f1d3b3721b063dfL, 0x7df58b09c1846695L, "DataDictonary.SQL.structure.Key"));
}

package DataDictonary.SQL.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.language.LanguageRegistry;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.smodel.adapter.ids.SLanguageId;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private final ConceptPresentation props_Attribute = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BaseRelation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Catalog = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Check = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Constrain = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Date = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_DateTime = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Default = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Domen = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ForeignKey = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ForeignKeysRef = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Index = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IndexRef = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Integer = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Key = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_KeysRef = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Null = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PredefineDomain = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PrimaryKey = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Relation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Shema = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Varchar = new ConceptPresentationBuilder().create();

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) LanguageRegistry.getInstance().getLanguage(MetaAdapterFactory.getLanguage(SLanguageId.deserialize("1e512a67-eb48-409a-8f1d-3b3721b063df"), "DataDictonary.SQL")).getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case 0:
        return props_Attribute;
      case 1:
        return props_BaseRelation;
      case 2:
        return props_Catalog;
      case 3:
        return props_Check;
      case 4:
        return props_Constrain;
      case 5:
        return props_Date;
      case 6:
        return props_DateTime;
      case 7:
        return props_Default;
      case 8:
        return props_Domen;
      case 9:
        return props_ForeignKey;
      case 10:
        return props_ForeignKeysRef;
      case 11:
        return props_Index;
      case 12:
        return props_IndexRef;
      case 13:
        return props_Integer;
      case 14:
        return props_Key;
      case 15:
        return props_KeysRef;
      case 16:
        return props_Null;
      case 17:
        return props_PredefineDomain;
      case 18:
        return props_PrimaryKey;
      case 19:
        return props_Relation;
      case 20:
        return props_Shema;
      case 21:
        return props_Varchar;
    }
    throw new IllegalStateException();
  }
}

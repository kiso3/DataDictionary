package DataDictionaryNew.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;
import java.util.Map;
import jetbrains.mps.smodel.adapter.ids.SPropertyId;
import jetbrains.mps.smodel.runtime.PropertyConstraintsDescriptor;
import java.util.HashMap;
import jetbrains.mps.smodel.runtime.base.BasePropertyConstraintsDescriptor;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

public class PredefinedDomain_Constraints extends BaseConstraintsDescriptor {
  public PredefinedDomain_Constraints() {
    super(MetaIdFactory.conceptId(0xe00ab26049b415aL, 0x83b6dc09f3615dc4L, 0x4709666cc5e0197fL));
  }
  @Override
  protected Map<SPropertyId, PropertyConstraintsDescriptor> getNotDefaultSProperties() {
    Map<SPropertyId, PropertyConstraintsDescriptor> properties = new HashMap<SPropertyId, PropertyConstraintsDescriptor>();
    properties.put(MetaIdFactory.propId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L), new BasePropertyConstraintsDescriptor(MetaIdFactory.propId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L), this) {
      @Override
      public boolean hasOwnValidator() {
        return true;
      }
      @Override
      public boolean validateValue(SNode node, String propertyValue) {
        String propertyName = "name";
        if ((SPropertyOperations.getString(propertyValue)).equals("integer") || (SPropertyOperations.getString(propertyValue)).equals("character") || (SPropertyOperations.getString(propertyValue)).equals("real") || (SPropertyOperations.getString(propertyValue)).equals("logical") || (SPropertyOperations.getString(propertyValue)).equals("date")) {
          return true;
        }
        return false;
      }
    });
    properties.put(MetaIdFactory.propId(0xe00ab26049b415aL, 0x83b6dc09f3615dc4L, 0x4709666cc5e0197fL, 0x4709666cc5e0e212L), new BasePropertyConstraintsDescriptor(MetaIdFactory.propId(0xe00ab26049b415aL, 0x83b6dc09f3615dc4L, 0x4709666cc5e0197fL, 0x4709666cc5e0e212L), this) {
      @Override
      public boolean hasOwnValidator() {
        return true;
      }
      @Override
      public boolean validateValue(SNode node, String propertyValue) {
        String propertyName = "length";
        if ((SPropertyOperations.getInteger(propertyValue)) > 0 || isEmptyString(SPropertyOperations.getString(node, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"))) || SPropertyOperations.getString(node, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name")).equals("date")) {
          return true;
        }
        return false;
      }
    });
    properties.put(MetaIdFactory.propId(0xe00ab26049b415aL, 0x83b6dc09f3615dc4L, 0x4709666cc5e0197fL, 0x5c982cbd6754282fL), new BasePropertyConstraintsDescriptor(MetaIdFactory.propId(0xe00ab26049b415aL, 0x83b6dc09f3615dc4L, 0x4709666cc5e0197fL, 0x5c982cbd6754282fL), this) {
      @Override
      public boolean hasOwnValidator() {
        return true;
      }
      @Override
      public boolean validateValue(SNode node, String propertyValue) {
        String propertyName = "format";
        if (isEmptyString(SPropertyOperations.getString(node, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name")))) {
          return true;
        }
        if (!(SPropertyOperations.getString(node, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name")).equals("date"))) {
          return true;
        }
        if ((SPropertyOperations.getString(propertyValue)).equals("dd.mm.yyyy") || (SPropertyOperations.getString(propertyValue)).equals("mm.dd.yyyy") || (SPropertyOperations.getString(propertyValue)).equals("dd.mm.yy")) {
          return true;
        }
        return false;
      }
    });
    return properties;
  }
  private static boolean isEmptyString(String str) {
    return str == null || str.length() == 0;
  }
}

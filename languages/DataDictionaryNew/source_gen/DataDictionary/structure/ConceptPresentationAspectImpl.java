package DataDictionary.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.language.LanguageRegistry;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.smodel.adapter.ids.SLanguageId;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private final ConceptPresentation props_AbstractField = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AbstractInLineStructure = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Aggregation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AggregationAsAField = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Constraint = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_DataDictionary = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Date = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_DateTime = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Definitions = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Domain = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ExclusiveSpecialization = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ExclusiveSpecializationInLine = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Field = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_FieldDefinition = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_FieldRef = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_FieldStructure = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Logical = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_NoExclusiveSpecialization = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_NoExclusiveSpecializationInLine = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Number = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PredefinedDomain = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SemanticDomain = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SemanticDomainDefinition = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Set = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SetOfComponentsAsAField = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Structure = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_StructureAsAField = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_StructureRef = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Text = new ConceptPresentationBuilder().create();

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) LanguageRegistry.getInstance().getLanguage(MetaAdapterFactory.getLanguage(SLanguageId.deserialize("0e00ab26-049b-415a-83b6-dc09f3615dc4"), "DataDictionary")).getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case 0:
        return props_AbstractField;
      case 1:
        return props_AbstractInLineStructure;
      case 2:
        return props_Aggregation;
      case 3:
        return props_AggregationAsAField;
      case 4:
        return props_Constraint;
      case 5:
        return props_DataDictionary;
      case 6:
        return props_Date;
      case 7:
        return props_DateTime;
      case 8:
        return props_Definitions;
      case 9:
        return props_Domain;
      case 10:
        return props_ExclusiveSpecialization;
      case 11:
        return props_ExclusiveSpecializationInLine;
      case 12:
        return props_Field;
      case 13:
        return props_FieldDefinition;
      case 14:
        return props_FieldRef;
      case 15:
        return props_FieldStructure;
      case 16:
        return props_Logical;
      case 17:
        return props_NoExclusiveSpecialization;
      case 18:
        return props_NoExclusiveSpecializationInLine;
      case 19:
        return props_Number;
      case 20:
        return props_PredefinedDomain;
      case 21:
        return props_SemanticDomain;
      case 22:
        return props_SemanticDomainDefinition;
      case 23:
        return props_Set;
      case 24:
        return props_SetOfComponentsAsAField;
      case 25:
        return props_Structure;
      case 26:
        return props_StructureAsAField;
      case 27:
        return props_StructureRef;
      case 28:
        return props_Text;
    }
    throw new IllegalStateException();
  }
}
